from datetime import datetime
import os
import pickle
import cvzone
import cv2
import face_recognition
import numpy as np
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
from firebase_admin import storage
import numpy as np
cred = credentials.Certificate("serviceaccountkey.json")
firebase_admin.initialize_app(cred,{
    'databaseURL':"https://attendancefacerealtime-default-rtdb.firebaseio.com/",'storageBucket':"attendancefacerealtime.appspot.com"
})
bucket = storage.bucket()



cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)

imgbackground = cv2.imread('Resources/background.jpg')

foldermdepath = 'Resources/modes'
modepathlist = os.listdir(foldermdepath)
imggmodelist = []
for path in modepathlist:
    imggmodelist.append(cv2.imread(os.path.join(foldermdepath, path)))
   # print(path)
   # print(len(imggmodelist))


# load encode
print("loading encode file")
file = open("encodedfile", 'rb')
encodelistknownid = pickle.load(file)
file.close()
encodedknown, stdid = encodelistknownid
print(stdid)
print("loaded encoded file")
counter = 0
modetype = 0
id = -1
imgstudent = []

while True:
    success, img = cap.read()
    imgs = cv2.resize(img, (0, 0), None, 0.25, 0.25)
    imgs = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    facecuframe = face_recognition.face_locations(imgs)
    encodecuframe = face_recognition.face_encodings(imgs, facecuframe)

    imgbackground[162:162 + 480, 55:55 + 640] = img
    imgbackground[44:44 + 633, 808:808 + 414] = imggmodelist[modetype]
    if facecuframe:

        for encodeface, faceloc in zip(encodecuframe, facecuframe):
            match = face_recognition.compare_faces(encodedknown, encodeface)
            facedis = face_recognition.face_distance(encodedknown, encodeface)
            #print(facedis)

            matchindex = np.argmin(facedis)
            #print(matchindex)
            if match[matchindex]:
                #print("known face detected")
                y1, x2, y2, x1 = faceloc
                y1, x2, y2, x1 = y1*4,x2*4,y2*4,x1*4
                bbox = 55+x1,162+y1,x2-x1,y2-y1
                imgbackground = cvzone.cornerRect(imgbackground, bbox, rt=0)


                id = stdid[matchindex]


                if counter ==0:
                    cvzone.putTextRect(imgbackground, "LOADING", (275, 400))
                    cv2.imshow("webcamp", imgbackground)
                    cv2.waitKey(1)
                    counter=1
                    modetype=1

        if counter !=0:

            if counter ==1:
                 studentinfo = db.reference(f'students/{id}').get()
                 blob = bucket.get_blob(f'images/{id}.jpg')
                 array = np.frombuffer(blob.download_as_string(), np.uint8)
                 imgstudt = cv2.imdecode(array, cv2.COLOR_BGRA2BGR)
                 datetimeobject = datetime.strptime(studentinfo['last_attended_time'],"%Y-%m-%d %H:%M:%S")
                 secelaped =(datetime.now()-datetimeobject).total_seconds()

                 if secelaped > 30:

                    ref = db.reference(f'students/{id}')
                    studentinfo['total_attendance'] +=1
                    ref.child('total_attendance').set(studentinfo['total_attendance'])
                    ref.child('last_attended_time').set(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                 else:
                    modetype= 3
                    counter = 0
                    imgbackground[44:44 + 633, 808:808 + 414] = imggmodelist[modetype]



            if modetype != 3:
                if 10 < counter < 20:
                    modetype = 2
                    imgbackground[44:44 + 633, 808:808 + 414] = imggmodelist[modetype]
                if counter<=10:
                    cv2.putText(imgbackground, str(studentinfo['total_attendance']), (861, 125),cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 1)

                    cv2.putText(imgbackground, str(studentinfo['Major']), (1006,550), cv2.FONT_HERSHEY_COMPLEX, 1,
                                (255, 255, 255), 1)
                    cv2.putText(imgbackground, str(studentinfo['Standings']), (910, 625), cv2.FONT_HERSHEY_COMPLEX, 1,
                                (100, 100, 100), 1)
                    cv2.putText(imgbackground, str(id), (1006, 493), cv2.FONT_HERSHEY_COMPLEX, 1,
                                (100, 100, 100), 1)
                    cv2.putText(imgbackground, str(studentinfo['Year']), (1025, 625), cv2.FONT_HERSHEY_COMPLEX, 1,
                                (100, 100, 100), 1)
                    cv2.putText(imgbackground, str(studentinfo['Starting_year']), (1125, 625), cv2.FONT_HERSHEY_COMPLEX, 1,
                                (100, 100, 100), 2)

                    (w,h),_ = cv2.getTextSize(studentinfo['Name'],cv2.FONT_HERSHEY_COMPLEX,1,1)
                    offset = (414-w)//2
                    cv2.putText(imgbackground, str(studentinfo['Name']), (808 + offset, 445), cv2.FONT_HERSHEY_COMPLEX, 1,(100, 100, 100), 1)
                    imgbackground[175:175 + 216, 909:909 + 216] = imgstudt
                counter +=1

                if counter >=20:
                    counter =  0
                    imgstudt = []
                    studentinfo = []

                    modetype=0
                    imgbackground[44:44 + 633, 808:808 + 414] = imggmodelist[modetype]
    else:
        modetype = 0
        counter = 0

    cv2.imshow("webcamp", imgbackground)

    #cv2.imshow("face recognition", img)
    key = cv2.waitKey(1)


